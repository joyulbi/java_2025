 1. SPRING
--------------------------------------------
#1. SPRING?
--------------------------------------------
▶ Step0. jsp
1. mvc1 - jsp( controller )역할
2. mvc2 - servlet( controller )역할
3. frontcontroller

=====================
=====================

▶ Step1. framework
1. framework [ 디자인 패턴 + 라이브러리 = 프레임워크 ]
2. 소프트웨어 개발의 뼈대역할

=====================
=====================

▶ Step2. ioc + di
1. ioc 
 - inversion of control
 - 제어의 역전
 - 인스턴스의 생성~소멸까지 생성주기를 개발자가 아니라 컨테이너가 하는 것  
 - pojo ( plain old java object )

  class A{}
  A a1 = new A()
  
  생성 → 초기화 → 서비스 → 소멸 
   ↑			  ↓
 --------------------------------------
  ioc가 아닌 경우 - [ 개발자가 → (Class A)
			    → (Class B)
			       → (Class C) ] 컨테이너


  ioc인       경우 - [ 개발자가 ← (Class A)
			    ← (Class B)
			       ← (Class C) ★ ] 컨테이너


2. di ( dependency injection : 의존성 주입 )
 - 각 클래스간의 의존관계를 [설정파일]을 통해 [컨테이너]가 자동으로 연결
   장점: 코드 단순화 / 결합도 제거





▶ Step3. 실습
=====================
실습(1) 설치
=====================
* 버젼 다운그레이드
  0. java.sun.com - java11
	C:\Program Files\Java\jdk-11
  1. 스프링 3버젼 다운로드
  2. 다운로드 경로
      https://github.com/spring-attic/toolsuite-distribution/wiki/Spring-Tool-Suite-3
  3. 압축 - 경로 짧게 / 공백, 한글, 특수기호(-) 경로에 있으면 다 빼기


=====================
실습(2) spring setting
=====================
 1. dynamic web project - spring000
 2. configure  - [Convert to Maven Project]
 3. spring      - add Spring project Nature
 4. java se-11 / project facts, build path
 5. build path - Classpath - add Libraries - JUnit 4 

 구조확인
	1. pom.xml 설치 다운로드
	2. src/main/java 실제 자바 파일들 위치
	3. src/test/java 실제 테스트 파일 위치
	4. src/main/webapp jsp 파일들 위치

 연습문제) spring001_di 프로젝트 만들기




=====================
실습(3) spring mvc
=====================
 1. 검색 : spring  
 2. legacy project
 3. mvc project
  
 ※ 플러그인
 \.metadata\.plugins\org.springsource.ide.eclipse.commons.content.core

 ※ import해서 완성된 파일 가져오기


=====================
실습(4) SPRING 정리
=====================
1. 프레임 워크
 - 소프트웨어개발의 뼈대역할 [디자인 패턴 + 라이브러리]
2. IOC 
 - 인스턴스 생성~소멸까지 생명주기를 스프링이 관리
3. DI
 - 각 클래스의 의존관계를 [설정파일]을 통해서 컨테이너가 자동연결
4. BEAN
 - 스프링이 관리하는 객체
 - beanFanctory ← ApplicationContext



=====================
실습(4) spring di 연습
=====================
 1. dynamic web project - spring002_di_ex
 2. configure  - [Convert to Maven Project]
 3. spring      - add Spring project Nature
 4. java se-11 / project facts, build path
 5. build path - Classpath - add Libraries - JUnit 4 [spring project 1]
--
 6. pom.xml 셋팅 > juni, context, spring-test        [spring project 2]
--
 7. 구성 확인
     [AnimalFarm]  (사용)→    [<<interface>>Animal]   
   ↑(삽입)        ↑(구현)       ↑ (구현)   
    [beans.xml ]  (생성)→     [Cat     /   Dog]

  >> di? 각 클래스의 의존관계를 [설정파일]을 통해서 컨테이너가 자동연결


  1) 인터페이스
     com.company.ioctest  
   interface Animal
   ----------------------------------
   public interface Animal {
      public String eat();
      public String sleep();
      public String poo();
   }
   ----------------------------------

   2) 구현클래스  
      com.company.ioctest  
      Cat 
      Dog  
   
   package com.company.ioc;
   public class Cat  implements Animal{
      @Override public String eat() { return "Cat-eat"; }
      @Override public String sleep() { return "Cat-sleep"; }
      @Override public String poo() { return "Cat-poo"; }
   } 


   3) 사용클래스 - AnimalFarm 
   package com.company.ioc;

   public class AnimalFarm {
      private String name;
      private Animal ani;
   
      public AnimalFarm() { super(); }
      public String getName() { return name; }
      public void setName(String name) { this.name = name; }
      public Animal getani() { return ani; }
      public void setani(Animal ani) { this.ani = ani; }
   
      public String aniSleep() { return name + ">" + ani.sleep(); }
      public String aniEat()   { return name + ">" + ani.eat(); }
      public String aniPoo()   { return name + ">" + ani.poo(); }
   
      public void print() { 
         System.out.println(  aniSleep()); 
         System.out.println(  aniEat()); 
         System.out.println(  aniPoo()); 
      }

   }



QUESTION1)  DI -   property 를 이용하여 셋팅하고 JUnit Test를 하시오
--1-1 com.company.test1  [ AnimalFarm ]
public class AnimalFarm1 {
   private String name;
   private Animal1 ani;  
}

--1-2 com.company.config   [ test1.xml] 
public void test1() {
   AnimalFarm1 farm = (AnimalFarm1) context.getBean("animalFarm1"); 
   farm.print();
}



QUESTION2)  DI -   constructor 를 이용하여 셋팅하고 JUnit Test를 하시오
--2-1 com.company.test2  [ AnimalFarm ]
public class AnimalFarm2 {
   private String name;
   private Animal ani;  
   public AnimalFarm2 (  String name, Animal ani ){  this.name=name;  this.ani = ani ;}
}

--2-2 com.company.config  [test2.xml]



---------------------------------
#3. Bean
---------------------------------
▶1. Bean?
1. bean spring이 관리하는 객체
2. xml vs Annotation
 2-1. xml [운영]
 - 모든 bean을 명시적으로 xml에 등록
 - 여러개발자가 같은 설정파일을 공유해서 개발하면 수정 시 충돌이 일어날 경우가 많음.

 2-2. Annotation ( Bean Scanning ) [개발]
 - Bean @을 붙여서 자동인식
 - 개발 속도 향상
 - Bean 간의 의존관계를 파악하기 힘듦. 


▶2. @Component
1. @Component 일반적인 컴포넌트
2. @Component 구체화된 형식 @Controller(웹 요청 받아서 응답), 
			   @Service(비지니스로직), @Repository(db연동)

<context:component-scan base-package="경로"/>




=====================
실습(1) spring di 연습
=====================
 1. dynamic web project -  spring003_been
 2. configure  - [Convert to Maven Project]
 3. spring      - add Spring project Nature
 4. java se-11 / project facts, build path
 5. build path - Classpath - add Libraries - JUnit 4 [spring project 1]
--
 6. pom.xml 셋팅 > juni, context, spring-test        [spring project 2]



---------------------------------
#4. DB / MYBATIS
---------------------------------
▶1. DataSource
 SimpleDriverDataSouce 가장 단순 버젼
 - getConnection() 매번생성

> mysql-connector-java / spring-jdbc
<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
<dependency>
    <groupId>mysql</groupId>
    <artifactId>mysql-connector-java</artifactId>
    <version>8.0.28</version>
</dependency>
<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-jdbc</artifactId>
    <version>4.3.20.RELEASE</version>
</dependency>


▶2. Mybatis 
1. sql을 별도로 파일분리해서 관리
2. ORM( object relational mapping ) 프레임워크
3. mybatis
====================
SqlSessionFactoryBean
	↓
SqlSessionFactoryBean → <<SqlSession>> → mapper.xml
			(insert, update, delete, select,,,)
※ SqlSessionFactory SqlSession 생성관리
※ SqlSession : sql실행, 트랜잭션
=====================

4. 실습 
 mybatis
 mybatis-spring
 
   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis</artifactId>
       <version>3.5.6</version>
   </dependency>
   <!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
   <dependency>
       <groupId>org.mybatis</groupId>
       <artifactId>mybatis-spring</artifactId>
       <version>2.0.6</version>
   </dependency>


5. 설정파일
   ## mapper 설정파일(1)
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE mapper
     PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
   <mapper namespace="org.mybatis.example.BlogMapper">
   </mapper>
   
   ## mapper 설정파일(2)  
   [Preferences] - [Xml] - Templates - New - New XML
   <?xml version="1.0" encoding="UTF-8" ?>
   <!DOCTYPE configuration
     PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
     "https://mybatis.org/dtd/mybatis-3-config.dtd">
   <configuration>
   </configuration>


insert	:	insert into userinfo(name,age) values(?,?)
select	:	select * from userinfo where no=?
			select * from userinfo
update	:	update userinfo set name=?,age=? where no=?
delete	:	delete from userinfo where no=? 


7-2. Dto (User Dto)
 * [com.company.dto] - UserDto
 private int no;
 private String name;
 private int age;

 //생성자, tostring, getters/setters

 * [config] - mybatis-config.xml mapper에서 사용할 UserDto 등록

7-3. Dao ( UserDao, UserDaoImpl, user-mapper.xml )



▶3.  Mybatis  ex
    1. dynamic web project - spring005_ex_board
    2. configure  - [Convert to Maven Project]
    3. spring      - add Spring project Nature
    4. java se-11 / project facts, build path
    5. build path - add Libraries - JUnit 4       
    6. pom.xml 셋팅   > junit, context, spring-test      ■[프로젝트만들기]

Q1. spring project spring005_ex_board만들기
Q2. Datasource를 셋팅하고 
     db.properties를 이용하여   datasource를 연동하시오 > SimpleDriverDataSource
Q3. Mybatis를 셋팅하고 
     다음 테이블의 crud를 테스트하시오.
 [com.company.dto]  - BoardDto                      mybatis-config.xml
 [com.company.dao] - BoardDao  /  BoardDaoImpl /  board-mapper.xml 

mysql> desc sboard;
+----------+---------------+------+-----+-------------------+-------------------+
| Field    | Type          | Null | Key | Default           | Extra             |
+----------+---------------+------+-----+-------------------+-------------------+
| bno      | int           | NO   | PRI | NULL              | auto_increment    |
| bname    | varchar(100)  | NO   |     | NULL              |                   |
| bpass    | varchar(50)   | NO   |     | NULL              |                   |
| btitle   | varchar(1000) | NO   |     | NULL              |                   |
| bcontent | text          | NO   |     | NULL              |                   |
| bdate    | timestamp     | NO   |     | CURRENT_TIMESTAMP | DEFAULT_GENERATED |
| bhit     | int           | NO   |     | 0                 |                   |
| bip      | varchar(50)   | NO   |     | NULL              |                   |
+----------+---------------+------+-----+-------------------+-------------------+
8 rows in set (0.00 sec)





-----------------------------------------
#5. DB/MYBATIS (2)
-----------------------------------------
▶1.  mybatis (1)
- TestDao, Impl, mapper.xml 의 파일량줄이기
-  SqlSession sqlSession , namespace="com.company.dao.TestDao" 코드안에 있어서 불편, 설정파일설정
TestDao <<interface>>
    ↑   
TestDaoImpl <<class>>
====================
   @Repository
   public class TestDaoImpl implements TestDao{
      @Autowired  private SqlSession sqlSession;  //sql 실행
      ivate static final String namespace="com.company.dao.TestDao";   ... 코드생략
   }
====================
test-mapper.xml



▶2.  mybatis (2)
- root-context.xml 설정파일
before:  구현클래스 삭제 - 구현클래스 없애고...안에있는 설정을
	@Autowired  private SqlSession sqlSession;  //sql 실행
	ivate static final String namespace="com.company.dao.TestDao";

after:
	<bean id ="" class="MapperFactoryBean">
	</bean>


1. 006_1 mybatis 프로젝트 복사
2. 006_2 mybatis 프로젝트 복사 - Impl 구현클래스 삭제 / root-context 수정



▶3. mybatis (3)
- MapperFactoryBean 매번 설정이 힘듦. 모든 mapper에 설정하기 힘듦 

- 해결방안 : Ma





-----------------------------------------
#6. mvc project
-----------------------------------------
▶1. mvc
>> 서로 영향없이 쉽게 고칠 수 있는 애플리케이션을 만들자!
Model	- 정보( dto, dao, service )
View 	- 화면( html, css, js/jquery )
Controller - 처리 (요청을 받아서 처리 후 응답)


▶2. mvc1 vs mvc2
mvc1 - controller의 역할을 jsp 담당
mvc1 - controller의 역할을 servlet 담당
FrontController - 공통작업 수행 → 세부컨트롤러에 처리



▶3.  SPRING MVC
[클라이언트]
 ↓ ① list.do
[FrontController]
<<DispatcherServlet>>  → 	② HandlerMapping   - @Controller
              			↓   
                 	           	③ 세부Controller  - db가 db처리                         
             		     ↓↑
			④  View


① 클라이언트 ( 코요테 - web.xml  - root-context.xml / servlet-context.xml / DispatcherServlet)
② DispatcherServlet   - HandlerMapping   - @Controller / 처리할 Controller 확인
③ 세부Controller  클라이언트 요청처리 (service - 비지니스로직)
④ 요청결과와 View정보를  DispatcherServlet 줌  / View를 개체를 생성해서 응답


1. 실습
1) pom.xml   spring-webmvc 등록  
   <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
   <dependency>
       <groupId>org.springframework</groupId>
       <artifactId>spring-webmvc</artifactId>
       <version>3.2.17.RELEASE</version>
   </dependency>
2) web.xml   ContextLoaderListener (스프링구동)  / DispatcherServlet (Frontcontroller)
         	root-context.xml (db설정) / servlet-context.xml (view servlet 설정)

3) servlet.xml
  4-1. @Controller 위치
	<context:component-scan base-package="com.company.controller"/>	
  4-2. Model model ( 처리결과 )
	<mvc:annotation-driven/>
  4-3. ViewResolver
3) config/servet-context.xml 

















