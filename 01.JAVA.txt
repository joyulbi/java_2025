● 1. java?
1) java? 
- 프로그래밍 언어
- 사람이 작성한 코드를 컴퓨터가 이해할 수 있는 명령을 작성하는 도구
- 정부나 기업의 si (시스템 통합 프로젝트)가 대부분 자바로 구현
- jvm (java virtual machine)
 운영체제와 하드웨어에 관계없이 실행
- OOP  


● 2. OOP 특징
- object oriented programming
- 부품객체(class)를 조립해서 만들어가는 프로그래밍 기법

part1) control ★
   - 변수 / 자료형 / 제어문 ( if/switch/for, while, do while) / array / method
part2) oop 특징 ★ 면접문제 많이나옴
   - class / static, final, modifier / 상속 / abstract, interface / 예외처리
part3) oop 활용
   - collection ( ArrayList ), Thread, lambda + Stream / io / network


● 3. 설치 (1) java
1) java.sun.com 다운로드 받아서 설치
   - JDK 17.0.14
   - jdk-17.0.14_windows-x64_bin.exe

2) java path 설정
   - JAVA_HOME : C:\Program Files\Java\jdk-17
   - path           : %JAVA_HOME%\bin

> [내 컴퓨터] - 오른쪽마우스 - 속성 - [고급시스템설정]-[고급]-[환경변수]
> 시스템 변수 - [새로만들기]

3) java 설치 확인
[검색] cmd
-------------------------------------
java -version
-------------------------------------


● 4. 설치 (2) eclipse
1) eclipse.org - 다운롤드 - java EE
2) 작업환경 (workspace) - D:\java_2025
* [window] - [preferences] - [perspective] - [검색 : enc]


● 5. 프로그램 작성 ( 프로그램 동작 )
1) 소스파일(개발자) - 컴파일(번역) - 바이트코드(컴퓨터)
   .java                                     .class
 
A001.java    -- javac A001.java --     A001.class


* 자바프로젝트 :  File - new - java project
       ▶ 프로젝트 이름 / ▶JRE - JavaSE-17

* 패키지 : 프로젝트 - src - 오른쪽 마우스 - new - package - com.회사명.프로젝트명.작업단위
  ex) com.company.java001

* 자바파일(부품객체) : 패키지 - 오른쪽 마우스 - new - class
   - 클래스명 대문자




ctrl + (화면크게) / ctrl - (화면작게)
한줄 : ctrl + alt + j

---------------------------------------------
package com.company.java001;

public class A001 {
	public static void main(String [] args) {
		System.out.println("Hello");
	} // end main
} // end class


// 한줄 주석(설명글)
/* ctrl + (화면크게) / ctrl - (화면작게)
 
3번째줄 : public class A001{
	public 아무데서나 접근가능 / class 부품객체 / A001 클래스이름
4번째줄 : jvm 구동시작점
	public static void main(String [] args){}
	public 아무데서나 접근가능 / static 메모리상 사용 가능 / void main(String[] args) 전원버튼 이름
5번째줄 : System.out.println("Hello");
	System(운영체제) out(cmd) println(출력)
	
ctrl + f11 실행
*/
----------------------------------------------

● 6. git연결
1) 폴더 만들기 - D:\java_2025
2) source tree




...집에 컴퓨터 > java,eclipse,git,sourcetree - 설치 (이번주까지 ~25.02.21) 


● 7.출력 (1) println, print, printf
1) System.out.println("문자열-하고 싶은 말");
    //\n 줄바꿈
   
2) System.out.print("문자열-하고 싶은 말"); //줄바꿈 처리 안됨
3) System.out.printf("내나이%d,내이름은%s,좋아하는 숫자 파이 %.2f",70,"조율비",2.5);
   %d 숫자정수 : 10,20,30
   %s 문자열 : "abc"
   %f 숫자실수 : 2.5

   System.out.println("A");
   System.out.println("AB");
   System.out.println("ABC");
    
   System.out.println("A\nAB\nABC");


● 7.출력 (2) + 의미,()
System.out.println( 1 + 2 ); //3
System.out.println( 1 + 2 + " + " + 3 + 4 ); // 3 + 34
System.out.println( "" + 1 + 2 ); //12

1)       + 연산
2) 숫자 + 숫자   --> 더하기 연산  
3) 숫자 + 문자열, 문자열 +숫자 --> 출력

● 8. 변수
1. 값?
- 토큰 : 특정의미를 가진 문자
- 리터럴, 키워드, 식별자, 연산자, 구분자

  System.out.println("hello");

2. 값의 보관
- 값의 보관 == 메모리 확보
- 변수 : 변하는 수 (오픈 박스) , 한개의 값
- 상수 : 변하지 않는 수 (밀봉 박스)
- 변수 이름 규칙 : $_소문자7

3. 변수 사용 법
  자료형 변수명;
 
  int a;       --> int 정수 1,2,3            a[ ]
  double b; --> double 실수 1.23       b[ ]

  a=10;				a[10]
  a=20;				a[20]

※ 상수 final int JAVA_HOME; -->수정못함

● 9. 자료형 (1)
1) 자료형의 구분
 - 기본형 : 실제 값 저장
 - 참조형 : 주소 값 저장 ( String )

2) 기본 자료형
 논리형 - boolean  true/false
 정수형 - byte(1byte) - short(2byte) - int(4byte)★ - long(8byte)    long l = 4L;
 실수형 - float(4byte) - double(8byte) ★ (4-8)
	float f = 3.14f; double d=3.14;

★ 자바 기본 처리 단위
★ 정수 < 실수 float f = 1L;


● 10. 자료형 (2) 형변환
1. 기본형
1) 논리형 - boolean : true/false
2) 정수형 - byte(1) - short(2) - int(4) ★ - long(8:L)
3) 실수형 - float(4:3.14f) - double(8)★

2. 형 변환
1) 데이터 타입을 다른 타입으로 변환하는 것
2) boolean 빼고 변환가능 
3) 자동타입 변환(작은타입은 큰 타입으로 자동변환) / 강제 타입 변환
- (float) , (int)
4) 자동 타입 변환
- byte by =1;     by[1]
  int in = 0;       in[4]
  in = by;
5) 강제 타입 변환
- int in = 0;       in[4]
  byte by =1;     by[1]
  by = in; ※ error
- 해결방안)  by = (byte)in;


3. char
1) 유니코드 - 2byte
char ch1 = ' ';
char ch2 = '\u0000';  - 유니코드\u

2) 저장시 숫자로 출력 문자로
3) 문자열에서 문자처리


※ 자바자료형 범위 찾아보기


● 11. 연산자
1. 연산?
1) 데이터를 처리해서 결과값을 산출하는 과정

2. 종류
먼저    값을 구하고           비교                 조건 처리 후    대입
 ()     +,-,*,/,%(나머지)    < >,<=,>=,==,!=       &&, || , ?: ,    =,+=,-=....

3. 필수 조건

● 12. 조건문(1)
1. 프로그램 코드 실행흐름
  - 위 -> 아래, 왼쪽 -> 오른쪽
  - 제어문은 개발자가 원하는 방향으로변경할 수 있도록 도와줌

● 13. 조건문(2)
2. 제어문의 종류
   조건문       : if, switch
   반복문       : for, while, do while
   제어 키워드 : break, continue

1) for(초기문; 조건문; 증감문;){반복해야할 내용} - 반복횟수를 알고 있을때
2) while(){} - 반복 횟수 모를때 예)게시판

   초기문;
   while(조건문){ 반복해야할 내용 증감문;}

3) do{ 반복해야 할 내용 }while( 조건문 ); -  무조건 1번은 실행


● 14. array 배열
1. 배열?
- [같은 타입]의 데이터를 연속된 공간에 저장하는 자료구조
- 각 데이터의 저장위치 인덱스를 통해서 접근

int a = 10; // 비교

int [] arr = { 1,2,3 };
-----------------------------------------------------------
[heap-동적데이터]       [stack-임시데이터]       
1번지{1,     2,     3} ← arr : 1번지
   arr[0] arr[1] arr[2]
-----------------------------------------------------------


● 15. method (1)
1. method?
- 코드 재사용
- 실행 하고자 하는 명령어들을 {} 안에 한꺼번에 모아놓고
- 메서드 이름이 호출되면 실행되는 기능
- function, method, 멤버함수

2. method 사용법
step1) 함수정의
step2) 함수호출


● 16. method (2)
1. 오버로딩
- 비슷한 동작을 수행하는 메서드들을 [같은 이름]으로 일관되게 작업하는 것.
- 파라미터 [타입]과 [개수]로 구분
- public, static, return값은 오버로딩에 영향을 미치지 않음

※ 참고사항 - 오버라이딩
- 상속시 자식클래스에서 맞게 메서드를 수정
 

2. call by value vs call by reference
- call by value : 전달 받은 값을 복사해서 처리 / 원본 값은 변경되지 않음

  void show(int a){ System.out.println(a*10); }
         show(1); //10

- call by reference : 전달 받은 주소를 직접 참조해서 처리 / 원본 값은 변경됨

  int [] a = {1,2,3};
  void show(int[]a){ a[0]*=10; }
        show(a);
  System.out.println( a[0] ); //10




------------------------------------------------------------------------------
part2) oop 특징 ★ 면접문제 많이나옴
   - class / static, final, modifier / 상속 / abstract, interface / 예외처리
------------------------------------------------------------------------------
◎ 1. CLASS?
1) 자바 저장단위
- 변수 < 배열 < 클래스

2) 클래스(CLASS)
- 객체의 특징
- 부품 객체
- 상태(멤버변수)와                행위(멤버함수)를 갖는다. 
   ex) 바퀴클래스,엔진클래스 + 드라이브, 후진, 파킹

3) OOP? ★
- 객체                지향          프로그래밍
- Object             Oriented     Programming
- 틀                   기반          프로그램
- 부품객체(클래스) 조립 완성된 프로그램을 만드는 기법

4) 클래스와 인스턴스
- 1. 클래스(설계도)틀로 ex) 붕어빵틀
- 2.	     인스턴스화를 통해(new 실제 메모리-heap에 객체만들기)
- 3. 		       여러개의 객체(인스턴스)를 만들기
			  ex) 객체(Objext) - 붕어빵들
			       인스턴스     - 팥붕어빵, 슈크림 붕어빵 각각.....
> 클래스는 설계도
> 인스턴스는 실제로 만들어진 객체


Q1. OOP란?
 - 객체 지향 프로그래밍
 - Object Oriented Programming
 - 클래스(부품객체) 조립해서 완성해가는 프로그램 

Q2. CLASS vs INSTANCE
 - 클래스는 설계도 인스턴스는 실제객체
 - 클래스(설계도)틀로 여러개의 객체(인스턴스)들으 만들 수 있음
 - 붕어빵기계 (설계도) ------------------------------------------->>> 붕어빵들(객체)
 	                  인스턴스화(heap : 실제만들었는지 확인) 	 인스턴스 - 각각의 특징
 - 클래스 (부품객체) - 특징에 맞게 코딩
 -  상태(멤버 변수)와 행위(멤버 함수)

Q3. runtime data area 영역 3가지를 적으시오
     [ method(클래스들의 정보, static,final), heap(new,this --동적), stack(지역) ]

Q4. A11 a1 = new A11();
   1. 메모리 빌려오고 객체 생성하는 역할 : [ new ]
   2. String null, int는 0으로 초기화 : [ A11( ) ]
   3. new A11()한 주소를 갖고 있는 것은 : [ a1 ]



◎ 2. 생성자
1. 생성자
 - new 연산자에 의해 호출 [초기화]담당
2. 기본생성자( 디폴트생성자 )
 - 모든 클래스에 생성자가 반드시 존재
 - 생성자 선언을 생략시 컴파일러가 자동으로 기본 생성자를 추가
 - 개발자가 선언시 컴파일러가 자동생성 취소  

3. 생성자형식
class A{
   public    A(){}   //기본생성자
   public    A(String name){}   //파라미터, 알규먼트가 있는 생성자.
}
1)  리턴값 없음          -   리턴값 메서드명(파라미터)
2)  클래스명과 이름이 동일
3)  디폴트생성자를 생성해야하는 경우 : 오버로딩 , 상속

4. 초기화 순서
   기본값		명시적초기화	생성자

   4-1 ) 기본값 : String, 객체 - null / int - 0으로 초기화
   4-2 ) 명시적 초기화 : int a=10;    중요콘텐츠 명시적으로 알림!
   4-3 ) 초기화블록 : { a=10; b=20; }   여러개초기화
   4-4 ) 생성자 : 최종은 생성자에서 사용함. 인스턴스변수 초기화


◎ 3. static / final
1. runtime data area
method: 정보저장, static, final
heap : 동적저장 - new gc(garbage collector)가 처리소멸
stack : 임시 저장 값

2. static
- jvm 소스로딩시 메모리 할당받음
- new연산자보다 먼저 실행되어 메모리(method 영역:runtime)에 1회 생성
- 클래스명.변수명  / 클래스명.메서드명   - 클래스변수/클래스메서드 
  Calc.name
- 객체생성과 관련이 없음.
- 인스턴스로 접근시 권장사항이 아니므로 경고발생

3. final
- 수정하지마
- 클래스 ( 상속받지마 - extends 사용못함)
- 멤버변수 ( 상수 )
- 멤버함수 ( 부모메서드사용못함 - @Override 못함)

◎ 4. 지정 접근자
- 클래스 및 구성요소에 대한 접근 제한 역할

◎ 5. 클래스 배열
- 클래스[] 배열명 = new 클래스[];

  String[] arr = new String[3];
  A1 [] carr = new A1[3]; //[null, null, null]
  ※ null - 공간은 있지만 값이 비어있어!
 
  carr[0] = new A1();   ※ 생성자를 불러서 인스턴스변수를 초기화해 사용가능하게 만들기
  1번지{ name="" } ← carr[0] 1번지








